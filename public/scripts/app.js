/*
 * Client-side JS logic goes here
 * jQuery is already loaded
 * Reminder: Use (and do all your DOM work in) jQuery's document ready function
 */

//makes it so that user can't input code that will run
function escape(str) {
  var div = document.createElement('div');
  div.appendChild(document.createTextNode(str));
  return div.innerHTML;
}

//create the html for the tweet container and insert the content from the user and database
function createTweetElement(tweetObject){
    const displayDate = function(date) {
        return date.toDateString();
    }

    return `

            <article class="tweets">
                <header class="tweetHeader">

                    <div class="avatar"> <img src="${escape(tweetObject.user.avatars.small)}" width="70px" height="70px"></div>
                    <div class="name">${escape(tweetObject.user.name)}</div>
                    <div class="email"> ${escape(tweetObject.user.handle)} </div>
                </header>
                <div class="textarea">
                    <textarea>${escape(tweetObject.content.text)}</textarea>
                </div>

                <footer class="tweetFooter">
                    <div  class="date">
                        <span>${escape(displayDate(new Date(tweetObject.created_at)))} </span>

                    </div>
                    <div class="icons">
                        <i class="fa fa-heart fa-lg logo"></i>
                        <i class="fa fa-retweet fa-lg logo"></i>
                        <i class="fa fa-flag fa-lg logo"></i>
                    </div>

                </footer>

            </article>`

}

//append the tweet object generated by createTweetElement to the tweet section ie. top of the tweetSection
const appendTweet = (tweetObject) => {
   $('#tweetSection').append(createTweetElement(tweetObject))
}

function renderTweets(tweets) {
  // empty the tweets section
    $('#tweetSection').empty()
    //loop through the tweet object and append tweet to the tweet object
    var $tweets = tweets.map(function(tweet){
        appendTweet(tweet)
    })

}
//run this code when the rest of the content as loaded/ document is ready
$(document).ready(function(){
    //when compose button is clicked drop slide down the new-tweet form and focus the text input area
    $('.composeButton').click(function(){
       $('.new-tweet').slideToggle("slow", function(){
           $('.formText').focus()
       });
    });


    $('.newTweetForm').on('submit', function (event) {
        let input = $('.formText').val().length
        event.preventDefault();
        //test user input, if empty or more than 140 characters show an error message
        if (input === 0 || input > 140) {
            let error = $("<span class='error'>Please enter between 1-140 characters</span>");
            $('input#submitButton').after(error);
            //if user input meets requirements send ajax request to create the tweet object with the users input
        } else {
            $('span.error').hide();
            $.ajax({
                method: 'POST',
                url: '/tweets',
                data: $(this).serialize()
            }).done(function() {
                loadTweets();
                //clear the text area after tweet has been successfully submitted
                $('textarea').val('')
            });
        }
    });
    //Read the tweets object and return rendered html
    function loadTweets (){
        $.ajax({
            url: '/tweets',
            method: 'GET',
            success: function (tweets){
                renderTweets(tweets)
            }
        });

    }
    //calls loadTweets
    loadTweets()
});
